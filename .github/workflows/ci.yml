name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Build and test dispatch server (C++)
  dispatch-server:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release]
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          build-essential \
          libssl-dev \
          zlib1g-dev \
          libcurl4-openssl-dev \
          pkg-config \
          uuid-dev \
          ${{ matrix.compiler == 'clang' && 'clang' || 'gcc' }}
    
    - name: Configure CMake
      working-directory: dispatch_server_cpp
      run: |
        export CC=${{ matrix.compiler == 'clang' && 'clang' || 'gcc' }}
        export CXX=${{ matrix.compiler == 'clang' && 'clang++' || 'g++' }}
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
    
    - name: Build
      working-directory: dispatch_server_cpp
      run: cmake --build build --config ${{ matrix.build_type }} -j$(nproc)
    
    - name: Test
      working-directory: dispatch_server_cpp/build
      run: |
        ./dispatch_server_tests --gtest_output=xml:test_results.xml
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.compiler }}-${{ matrix.build_type }}
        path: dispatch_server_cpp/build/test_results.xml
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dispatch-server-${{ matrix.compiler }}-${{ matrix.build_type }}
        path: |
          dispatch_server_cpp/build/dispatch_server_app
          dispatch_server_cpp/build/dispatch_server_modern
  
  # Build and test transcoding engine (C++)
  transcoding-engine:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release]
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          build-essential \
          libssl-dev \
          zlib1g-dev \
          libcurl4-openssl-dev \
          pkg-config \
          ffmpeg \
          libavcodec-dev \
          libavformat-dev \
          libavutil-dev \
          libswscale-dev \
          ${{ matrix.compiler == 'clang' && 'clang' || 'gcc' }}
    
    - name: Configure CMake
      working-directory: transcoding_engine_cpp
      run: |
        export CC=${{ matrix.compiler == 'clang' && 'clang' || 'gcc' }}
        export CXX=${{ matrix.compiler == 'clang' && 'clang++' || 'g++' }}
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
    
    - name: Build
      working-directory: transcoding_engine_cpp
      run: cmake --build build --config ${{ matrix.build_type }} -j$(nproc)
    
    - name: Test
      working-directory: transcoding_engine_cpp/build
      run: |
        if [ -f "./transcoding_engine_tests" ]; then
          ./transcoding_engine_tests --gtest_output=xml:test_results.xml
        else
          echo "No tests found for transcoding engine"
        fi
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: transcoding-engine-test-results-${{ matrix.compiler }}-${{ matrix.build_type }}
        path: transcoding_engine_cpp/build/test_results.xml
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: transcoding-engine-${{ matrix.compiler }}-${{ matrix.build_type }}
        path: |
          transcoding_engine_cpp/build/transcoding_engine
          transcoding_engine_cpp/build/transcoding_engine_app
  
  # Build and test submission client (C++)
  submission-client:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release]
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          build-essential \
          libssl-dev \
          zlib1g-dev \
          libcurl4-openssl-dev \
          pkg-config \
          qtbase5-dev \
          qttools5-dev \
          qttools5-dev-tools \
          libqt5svg5-dev \
          ${{ matrix.compiler == 'clang' && 'clang' || 'gcc' }}
    
    - name: Configure CMake
      working-directory: submission_client_desktop
      run: |
        export CC=${{ matrix.compiler == 'clang' && 'clang' || 'gcc' }}
        export CXX=${{ matrix.compiler == 'clang' && 'clang++' || 'g++' }}
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
    
    - name: Build
      working-directory: submission_client_desktop
      run: cmake --build build --config ${{ matrix.build_type }} -j$(nproc)
    
    - name: Test
      working-directory: submission_client_desktop/build
      run: |
        if [ -f "./submission_client_tests" ]; then
          xvfb-run -a ./submission_client_tests --gtest_output=xml:test_results.xml
        else
          echo "No tests found for submission client"
        fi
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: submission-client-test-results-${{ matrix.compiler }}-${{ matrix.build_type }}
        path: submission_client_desktop/build/test_results.xml
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: submission-client-${{ matrix.compiler }}-${{ matrix.build_type }}
        path: |
          submission_client_desktop/build/submission_client
          submission_client_desktop/build/submission_client_app

  # Code quality checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cppcheck \
          clang-format \
          clang-tidy \
          cmake \
          build-essential \
          libssl-dev \
          zlib1g-dev \
          libcurl4-openssl-dev \
          pkg-config \
          uuid-dev
    
    - name: Run cppcheck
      run: |
        cppcheck --enable=all --xml --xml-version=2 \
          --suppress=missingIncludeSystem \
          --suppress=unmatchedSuppression \
          --suppress=unusedFunction \
          dispatch_server_cpp/ transcoding_engine_cpp/ submission_client_desktop/ \
          2> cppcheck-report.xml || true
    
    - name: Upload cppcheck results
      uses: actions/upload-artifact@v4
      with:
        name: cppcheck-report
        path: cppcheck-report.xml
    
    - name: Check code formatting
      run: |
        find dispatch_server_cpp/ transcoding_engine_cpp/ submission_client_desktop/ \
          -name "*.cpp" -o -name "*.h" -o -name "*.hpp" | \
          xargs clang-format --dry-run --Werror || echo "Code formatting issues found"

  # Integration tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [dispatch-server, transcoding-engine, submission-client]
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          build-essential \
          libssl-dev \
          zlib1g-dev \
          libcurl4-openssl-dev \
          pkg-config \
          uuid-dev \
          ffmpeg \
          libavcodec-dev \
          libavformat-dev \
          libavutil-dev \
          libswscale-dev \
          python3 \
          python3-pip \
          curl \
          jq
    
    - name: Download dispatch server artifacts
      uses: actions/download-artifact@v4
      with:
        name: dispatch-server-gcc-Release
        path: dispatch_server_cpp/build/
    
    - name: Download transcoding engine artifacts
      uses: actions/download-artifact@v4
      with:
        name: transcoding-engine-gcc-Release
        path: transcoding_engine_cpp/build/
    
    - name: Make binaries executable
      run: |
        chmod +x dispatch_server_cpp/build/dispatch_server_app
        chmod +x transcoding_engine_cpp/build/transcoding_engine || true
    
    - name: Run integration tests
      run: |
        # Start dispatch server in background
        cd dispatch_server_cpp/build
        ./dispatch_server_app &
        DISPATCH_PID=$!
        
        # Wait for server to start
        sleep 5
        
        # Test server health
        curl -f http://localhost:8080/ || exit 1
        
        # Test API v1 endpoints
        curl -f http://localhost:8080/api/v1/version || exit 1
        curl -f http://localhost:8080/api/v1/status || exit 1
        
        # Test job submission
        JOB_RESPONSE=$(curl -s -X POST \
          -H "Content-Type: application/json" \
          -d '{"source_url": "http://example.com/test.mp4", "target_codec": "h264"}' \
          http://localhost:8080/api/v1/jobs)
        
        echo "Job response: $JOB_RESPONSE"
        
        # Extract job ID
        JOB_ID=$(echo "$JOB_RESPONSE" | jq -r '.job_id')
        
        # Test job status
        curl -f "http://localhost:8080/api/v1/jobs/$JOB_ID" || exit 1
        
        # Cleanup
        kill $DISPATCH_PID
        
        echo "Integration tests passed!"

  # Security scans
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'